section .data	;Define 2 variables to store and third to store answer. If new line required after answer store it as variable
factor: db 0x30
sol: db 0x37
ans: db 0x00
d: db 0x0A

msg: db "Enter first number: "
len: equ $-msg

msg1: db 0x0A,"Enter second number:  "
len1: equ $-msg1

msg2: db 0x0A,"The addition is "
len2: equ $-msg2

section .bss
val1: resd 5
val2: resd 5

section .text
global main
main:

mov rax,1		;Printing "First number is "
mov rdi,1
mov rsi,msg
mov rdx,len
syscall

mov rax,0		;Printing the number
mov rdi,1
mov rsi,val1
mov rdx,5
syscall

mov rax,1		;Printing "Second number is "
mov rdi,1
mov rsi,msg1
mov rdx,len1
syscall

mov rax,0		;Printing the second number
mov rdi,1
mov rsi,val2
mov rdx,5
syscall

mov al,byte[val1]
mov ah,byte[sol]
sub al,ah
mov byte[val1],al

mov al,byte[val2]
mov ah,byte[sol]
sub al,ah
mov byte[val2],al

mov al,byte[val1]		;We cant perform add operation on variables as thry are nothing but memory and two memories cant be added	
mov ah,byte[val2] 	;So we first store the values in the memories into two registers which are of equal size as that of the memory
add al,ah			;Add the values and return them into a third variable, again returning only the value
mov byte[ans],al

mov al,byte[ans]
mov ah,byte[sol]
add al,ah
mov byte[ans],al

mov rax,1		;Print "Addition is"
mov rdi,1
mov rsi,msg2
mov rdx,len2
syscall

mov rax,1		;Print the answer
mov rdi,1
mov rsi,ans
mov rdx,1
syscall

mov rax,1		;New line
mov rdi,1
mov rsi,d
mov rdx,1
syscall

mov rax,60
mov rdi,0
syscall
